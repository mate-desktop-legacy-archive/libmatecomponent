<!-- ##### SECTION Title ##### -->
MateComponentRunningContext

<!-- ##### SECTION Short_Description ##### -->
a live object tracker

<!-- ##### SECTION Long_Description ##### -->

<para>
    #MateComponentRunningContext implements the
    <classname>MateComponent::RunningContext</classname> IDL interface,
    depicted in <xref linkend="running-context-img"/>.
</para>

<figure id="running-context-img">
    <title>The MateComponent::RunningContext interface</title>
    <mediaobject>
	<imageobject>
	    <imagedata fileref="running-context.png" format="PNG"/>
	</imageobject>
    </mediaobject>
</figure>

<para>
    The purpose of this object is to keep track of currently running
    objects.  This is useful in, for example, exe type factories, in
    order to know when it is safe to quit from the main loop.
</para>

<para>
    #MateComponentRunningContext is a singleton.  There is at most one
    instance running at all times.  All #MateComponentObject's are
    automatically registered with the running context as part of their
    normal initialization procedure.
</para>
<para>
    To find out when all objects have been destroyed, just connect a
    handler to the "last-unref" signal.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>
    <xref linkend="libmatecomponent-matecomponent-generic-factory"/>
</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### SECTION Image ##### -->


<!-- ##### STRUCT MateComponentRunningContext ##### -->
<para>
the running context data
</para>

@parent: 
@priv: 

<!-- ##### STRUCT MateComponentRunningContextClass ##### -->
<para>
the running context class
</para>

@parent: 
@epv: 
@last_unref: 

<!-- ##### FUNCTION matecomponent_running_context_new ##### -->
<para>

</para>

@void: 
@Returns: 


<!-- ##### FUNCTION matecomponent_running_context_ignore_object ##### -->
<para>

</para>

@object: 


<!-- ##### FUNCTION matecomponent_running_context_at_exit_unref ##### -->
<para>

</para>

@object: 


