<!-- ##### SECTION Title ##### -->
matecomponent-stream-client

<!-- ##### SECTION Short_Description ##### -->
Simplified client wrapper functions for the Stream interface

<!-- ##### SECTION Long_Description ##### -->
<para>
These interfaces are designed to make the stream interface
slightly easier to use from client code. This is done 2 ways,
first by make the exception environments optiional, and secondly
by providing slightly nicer semantics.
</para>

<para>
  <example>
     <title>Writing some simple data to a stream</title>
     <programlisting>
matecomponent_stream_client_printf (stream, TRUE, ev, "Hello World: %d", 5);
     </programlisting>
  </example>
  It is well worth using the matecomponent_stream_client_write function
for any potentialy large writes, since this blocks the data into
sensible chunks. This is important, otherwise a single transfer is
attempted that will cause hassles in the CORBA stubs. [ NB. MateCORBA
tries to alloca a huge chunk of memory and SEGVs ].
</para>

<!-- ##### SECTION See_Also ##### -->
<para>
#MateComponentStream
</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### SECTION Image ##### -->


<!-- ##### FUNCTION matecomponent_stream_client_write ##### -->
<para>

</para>

@stream: 
@buffer: 
@size: 
@ev: 


<!-- ##### FUNCTION matecomponent_stream_client_read ##### -->
<para>

</para>

@stream: 
@size: 
@length_read: 
@ev: 
@Returns: 


<!-- ##### FUNCTION matecomponent_stream_client_write_string ##### -->
<para>

</para>

@stream: 
@str: 
@terminate: 
@ev: 


<!-- ##### FUNCTION matecomponent_stream_client_printf ##### -->
<para>

</para>

@stream: 
@terminate: 
@ev: 
@fmt: 
@Varargs: 


<!-- ##### FUNCTION matecomponent_stream_client_read_string ##### -->
<para>

</para>

@stream: 
@str: 
@ev: 
@Returns: 


<!-- ##### FUNCTION matecomponent_stream_client_get_length ##### -->
<para>

</para>

@stream: 
@ev: 
@Returns: 


